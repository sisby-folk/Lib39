buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.google.code.gson:gson:2.10.1'
		classpath 'com.modrinth.minotaur:Minotaur:2.8.4'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
	}
}
plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'eclipse'
}

if (System.getenv("MODRINTH_TOKEN")) {
	apply plugin: "com.modrinth.minotaur"
}
if (System.getenv("CURSE_TOKEN")) {
	apply plugin: "com.matthewprenger.cursegradle"
}

sourceCompatibility = JavaVersion.toVersion(17)
targetCompatibility = JavaVersion.toVersion(17)

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
	dummy {
		compileClasspath += sourceSets.main.compileClasspath
	}
	main {
		compileClasspath += sourceSets.dummy.output
	}
}

repositories {
	maven {
		url 'https://repo.unascribed.com'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		url 'https://maven.quiltmc.org/repository/release'
		content {
			includeGroup 'org.quiltmc'
			includeGroup 'org.quiltmc.unpick'
		}
	}
	maven {
		url 'https://maven.terraformersmc.com/releases/'
		content {
			includeGroup 'dev.emi'
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		url "https://maven.shedaniel.me/"
		content {
			includeGroup 'me.shedaniel'
			includeGroup 'me.shedaniel.cloth'
			includeGroup 'me.shedaniel.cloth.api'
			includeGroup 'dev.architectury'
		}
	}
	maven {
		url "https://maven.blamejared.com/"
		content {
			includeGroup 'mezz.jei'
		}
	}
}


dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${mappings_version}:intermediary-v2"
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"

	modCompileOnly "dev.emi:emi-fabric:1.1.6+1.20.1"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

loom {
	accessWidenerPath = file("src/main/resources/lib39.accesswidener")
}

java {
	withSourcesJar()
}

compileJava {
	options.release = 17
}

tasks.validateAccessWidener {
	enabled = false
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", minecraft_version

	filesMatching("**/fabric.mod.json") {
		expand "version": project.version,
			"mcversion": '${mcversion}'
	}
}

tasks.jar {
	destinationDirectory.set(file('build/tmp'))
	archiveClassifier.set 'all'
}

tasks.remapJar {
	destinationDirectory.set(file('build/tmp'))
	archiveClassifier.set 'all-remapped'
}

tasks.remapSourcesJar {
	destinationDirectory.set(file('build/tmp'))
	archiveClassifier.set 'all-sources-remapped'
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

def amender = evaluate(file("JarAmender.groovy"))

task splitRefmap {
	dependsOn remapJar
	doFirst {
		amender(remapJar.archivePath)
	}
}

import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;

def gson = new GsonBuilder().setPrettyPrinting().create()

def fatJarJars = new JsonArray()

def fatJarFmj = new JsonObject()
fatJarFmj.addProperty("schemaVersion", 1)
fatJarFmj.addProperty("id", "lib39")
fatJarFmj.addProperty("name", "Lib39")
fatJarFmj.addProperty("version", "${rootProject.version}+${minecraft_version}")
fatJarFmj.addProperty("description", "A library of useful tidbits originating in Yttr.")
fatJarFmj.addProperty("icon", "lib39.png")
fatJarFmj.addProperty("license", "MIT")
fatJarFmj.addProperty("environment", "*")
fatJarFmj.add("jars", fatJarJars)
rootProject.build.dependsOn(rootProject.tasks.create("fatJar", Jar) {
	doFirst {
		rootProject.file("build/tmp/fatjar/").mkdirs()
		rootProject.file("build/tmp/fatjar/fabric.mod.json").text = gson.toJson(fatJarFmj)
	}
	archiveClassifier.set 'all'
	archiveVersion.set "${rootProject.version}+${minecraft_version}"
	from 'src/main/resources/lib39.png'
	from "build/tmp/fatjar/fabric.mod.json"
})



def uploadAdditionalFiles = []

tasks.remapJar.finalizedBy splitRefmap

def defineModule = { name, depModules ->
	def Name = name.substring(0, 1).toUpperCase(Locale.ROOT)+name.substring(1)
	def t = rootProject.tasks.create("${name}Jar", Jar) {
		dependsOn rootProject.remapJar
		destinationDirectory.set(rootProject.file("build/libs/modules"))
		archiveBaseName.set "lib39-${name}"
		archiveVersion.set "${rootProject.version}+${minecraft_version}"
		from(zipTree(rootProject.remapJar.archivePath)) {
			include 'META-INF/**'
			include 'com/unascribed/lib39/'+name+'/**'
			include name+'/**'
			include 'lib39.png'
			includeEmptyDirs = false
			duplicatesStrategy 'include'
			eachFile {
				if (it.path.startsWith(name+"/")) {
					it.path = it.path.substring(name.length()+1)
				}
			}
			filesMatching("**/fabric.mod.json") {
				expand "mcversion": minecraft_version
			}
		}
	}
	rootProject.tasks['build'].dependsOn t
	t.finalizedBy(rootProject.tasks.create('amend'+Name+'Jar') {
		dependsOn t
		doFirst {
			amender(t.archivePath)
		}
	})

	def fJ = rootProject.tasks["fatJar"]
	fJ.dependsOn(t)
	fJ.from(t.archivePath) {
		into 'META-INF/jars'
	}
	uploadAdditionalFiles.add(t)
	def jarObj = new JsonObject()
	jarObj.addProperty("file", "META-INF/jars/"+t.archiveFileName.get())
	fatJarJars.add(jarObj)

	def srcT = rootProject.tasks.create("${name}SourcesJar", Jar) {
		dependsOn rootProject.remapSourcesJar
		archiveBaseName.set "lib39-${name}"
		archiveClassifier.set 'sources'
		destinationDirectory.set(rootProject.file("build/libs/sources"))
		archiveVersion.set "${rootProject.version}+${minecraft_version}"
		from(zipTree(rootProject.remapSourcesJar.archivePath)) {
			include 'META-INF/**'
			include 'com/unascribed/lib39/'+name+'/**'
			include name+'/**'
			include 'lib39.png'
			includeEmptyDirs = false
			duplicatesStrategy 'include'
			eachFile {
				if (it.path.startsWith(name+"/")) {
					it.path = it.path.substring(name.length()+1)
				}
			}
		}
	}

	loom.disableDeprecatedPomGeneration(publishing.publications.create("${name}${minecraft_version}", MavenPublication) {
		groupId 'com.unascribed'
		artifactId 'lib39-'+name
		version "${rootProject.version}+${minecraft_version}"
		artifact(t.archivePath) {
			classifier ''
			builtBy t
		}
		artifact(srcT.archivePath) {
			classifier 'sources'
			builtBy srcT
		}

		pom.withXml { xml ->
			def deps = xml.asNode().appendNode('dependencies')
			depModules.each {
				def dep = deps.appendNode('dependency')
				def spec = ['com.unascribed', 'lib39-'+it, "${rootProject.version}+${minecraft_version}"]
				if (it.contains(':')) {
					spec = it.split(":")
				}
				if (spec[0] == 'fapi') {
					spec[0] = 'net.fabricmc.fabric-api'
					spec[2] = fabricApi.moduleVersion(spec[1], spec[2] == '?' ? fabric_version : spec[2])
				}
				dep.appendNode('groupId', spec[0])
				dep.appendNode('artifactId', spec[1])
				dep.appendNode('version', spec[2])
			}
		}
	})
}

evaluationDependsOnChildren()
afterEvaluate {
	defineModule 'core', []
	defineModule 'lockpick', ['core']
	defineModule 'tunnel', ['core']
	defineModule 'phantom', ['core']
	defineModule 'waypoint', ['core',
		"fapi:fabric-transitive-access-wideners-v1:?",
		"fapi:fabric-lifecycle-events-v1:?",
		"fapi:fabric-rendering-v1:?",
		"fapi:fabric-resource-loader-v0:?"
	]
	defineModule 'weld', ['core', "fapi:fabric-resource-loader-v0:?"]
	defineModule 'sandman', ['core', "fapi:fabric-lifecycle-events-v1:?"]
	defineModule 'crowbar', ['core', "fapi:fabric-api-base:?"]
	defineModule 'keygen', ['core']
	defineModule 'dessicant', ['core']
	defineModule 'deferral', []
	defineModule 'machination', ['core',
		"fapi:fabric-lifecycle-events-v1:?",
		"fapi:fabric-resource-loader-v0:?"
	]
	defineModule 'util', ['core']
	defineModule 'ripple', ['core']
	defineModule 'recoil', ['core', "fapi:fabric-api-base:?", "fapi:fabric-networking-api-v1:?"]
	defineModule 'mesh', ['core', "fapi:fabric-lifecycle-events-v1:?"]
	defineModule 'aqi', ['core']
}

if (System.getenv("MODRINTH_TOKEN")) {
	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = 'lib39'
		versionNumber = project.version
		versionName = 'v'+project.version
		versionType = 'release'
		changelog = file('CHANGELOG.md').text
		uploadFile = fatJar
		gameVersions = ['1.20', '1.20.1']
		loaders = ['fabric', 'quilt']
		detectLoaders = false
	}
}

if (System.getenv("CURSE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSE_TOKEN")
		project {
			id = '661690'
			releaseType = 'release'
			changelogType = 'markdown'
			changelog = file('CHANGELOG.md')

			addGameVersion '1.20'
			addGameVersion '1.20.1'
			addGameVersion 'Fabric'
			addGameVersion 'Quilt'

			mainArtifact(fatJar) {
				displayName = 'v'+project.version
			}
		}
		options {
			javaIntegration = false
			forgeGradleIntegration = false
			javaVersionAutoDetect = false
		}
	}
}

publishing {
	repositories {
		if (project.hasProperty("publish-username")) {
			maven {
				url "https://repo-api.sleeping.town/"
				credentials {
					username project.getProperty("publish-username")
					password project.getProperty("publish-password")
				}
			}
		}
		maven {
			url file('build/maven').toURI().toString()
		}
	}
}
